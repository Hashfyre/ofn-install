#--------------------
# Get timestamp

- name: define a timestamp
  set_fact:
    timestamp: "{{ ansible_date_time.date }}-{{ ansible_date_time.hour }}{{ ansible_date_time.minute }}{{ ansible_date_time.second }}"


#--------------------------
# Create a rollback release

- name: create a database rollback version
  shell: pg_dump -h {{ db_host }} -U {{ db_user }} {{ db }} | gzip > {{ rollback_sql_path }}
  args:
    creates: "{{ rollback_sql_path }}"

- name: create a database backup version
  command: cp {{ rollback_sql_path }} {{ releases_path }}/{{ timestamp }}.sql.gz
  tags: skip_ansible_lint

- name: create a repo rollback version
  command: mv {{ current_path }} {{ rollback_path }} removes={{ current_path }}
  tags: skip_ansible_lint

- name: create a repo backup version
  command: cp -r {{ rollback_path }} {{ releases_path }}/{{ timestamp }} removes={{ rollback_path }}
  tags: skip_ansible_lint

#-------------------------
# Move new code into place

- name: move build to current
  command: mv {{ build_path }} {{ current_path }} removes={{ build_path }}
  become: yes
  become_user: "{{ unicorn_user }}"

#--------------------
# Update the database

- name: check database status
  command: psql -h {{ db_host }} -U {{ db_user }} -d {{ db }} -c "SELECT true FROM pg_tables WHERE tablename = 'order_cycles';"
  register: table_exists
  ignore_errors: yes
  tags:
    - rake
    - skip_ansible_lint

- debug: msg="{{ table_exists.stdout }}"
  tags: rake
- debug: msg="{{ table_exists.stderr }}"
  tags: rake

- name: create database if it doesn't exist
  command: bash -lc "bundle exec rake db:create RAILS_ENV={{ rails_env }}"
  args:
    chdir: "{{ current_path }}"
  when: table_exists.stderr.find('does not exist') != -1
  tags:
    - rake
    - skip_ansible_lint

- name: load schema if it isn't loaded
  command: bash -lc "bundle exec rake db:schema:load RAILS_ENV={{ rails_env }}"
  args:
    chdir: "{{ current_path }}"
  when: table_exists.stderr.find('does not exist') != -1 or table_exists.stdout.find('0 rows') != -1
  tags:
    - rake
    - skip_ansible_lint

- name: migrate database
  command: bash -lc "bundle exec rake db:migrate RAILS_ENV={{ rails_env }}"
  args:
    chdir: "{{ current_path }}"
  tags:
    - rake
    - skip_ansible_lint
  notify:
    - precompile assets
    - restart unicorn
    - restart delayed job workers

- name: seed database
  # We run a shell script that passes the default email and password to rake with an EOF block, so we don't hang on the prompts.
  command: bash -lc "{{ config_path }}/seed.sh RAILS_ENV={{ rails_env }}"
  args:
    chdir: "{{ current_path }}"
  # when: table_exists.stderr.find('does not exist') != -1
  tags:
    - seed
    - skip_ansible_lint
  notify:
    - precompile assets
    - restart unicorn
